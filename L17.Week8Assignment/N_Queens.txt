*********************optimized code************************

class Solution {
public:


    void find(int row, int n, vector<vector<string>>&ans, vector<string>&Board, vector<bool>&column, vector<bool>&LeftDig, vector<bool>&RightDig){
        if(row == n){
            ans.push_back(Board);
            return;
        }

        //Left dig => n-1+col-row
        //Right dig => row+col

        for(int j=0; j<n; j++){
            if(column[j]==0 && LeftDig[n-1+j-row]==0 && RightDig[row+j]==0){
                column[j] = 1;
                Board[row][j] = 'Q';
                LeftDig[n-1+j-row]=1;
                RightDig[row+j]=1;
                find(row+1, n, ans, Board, column, LeftDig, RightDig);
                LeftDig[n-1+j-row]=0;
                RightDig[row+j]=0;
                column[j] = 0;
                Board[row][j] = '.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>Board(n);
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                Board[i].push_back('.');
            }
        }

        vector<bool>LeftDig(2*n-1, 0);
        vector<bool>RightDig(2*n-1, 0);

        vector<bool>column(n,0);

        find(0, n, ans, Board, column, LeftDig, RightDig);

        return ans;
    }
};








******************not optimized code**************




class Solution {
public:

    bool check(int n, vector<string>&Board, int i, int j){
        int row = i, col = j;

        //upper left diagonal
        while(row > -1 && col > -1){
            if(Board[row][col] == 'Q'){
                return 0;
            }
            row--, col--;
        }

        //upper right diagonal
        row = i, col = j;
        while(row > -1 && col < n){
            if(Board[row][col] == 'Q'){
                return 0;
            }
            row--, col++;
        }

        return 1;
       
    }

    void find(int row, int n, vector<vector<string>>&ans, vector<string>&Board, vector<bool>&column){

        if(row == n){
            ans.push_back(Board);
            return;
        }

        for(int j=0; j<n; j++){
            if(column[j]==0 && check(n, Board, row, j)){
                column[j] = 1;
                Board[row][j] = 'Q';
                find(row+1, n, ans, Board, column);
                column[j] = 0;
                Board[row][j] = '.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> Board(n);
        for(int i=0; i<n; i++)
        for(int j=0; j<n; j++)
        Board[i].push_back('.');

        vector<bool> column(n, 0);

        find(0, n, ans, Board, column);

        return ans;
    }
};