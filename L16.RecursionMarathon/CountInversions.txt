//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    
    long long int merge(long long arr[], vector<long long>&temp, int start, int mid, int end){
        int i = start, j = mid+1,  k = start;
        long long int c = 0;
        
        while(i <= mid && j <= end){
            if(arr[i] <= arr[j]){
                temp[k++] = arr[i++];
            }
            else {
                temp[k++] = arr[j++];
                c += mid - i + 1;
            }
        }
        
        while(i <= mid){
            temp[k++] = arr[i++];
        }
        while(j <= end){
            temp[k++] = arr[j++];
        }
        
        while(start <= end){
            arr[start] = temp[start];
            start++;
        }
        
        return c;
    }
    
    long long int mergeSort(long long arr[], vector<long long>&temp, int start, int end){
        if(start >= end){
            return 0;
        }
        
        long long int c = 0;
        int mid = (start+end)/2;
        
        c += mergeSort(arr, temp, start, mid);
        c += mergeSort(arr, temp, mid+1, end);
        c += merge(arr, temp, start, mid, end);
        return c;
    }
    
    long long int inversionCount(long long arr[], int n) {
        long long int c = 0;
        vector<long long>temp(n, 0);
        c = mergeSort(arr, temp, 0, n-1);
        return c;
    }
};

//{ Driver Code Starts.

int main() {

    long long T;
    cin >> T;

    while (T--) {
        int N;
        cin >> N;

        long long A[N];
        for (long long i = 0; i < N; i++) {
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A, N) << endl;
    }

    return 0;
}

// } Driver Code Ends