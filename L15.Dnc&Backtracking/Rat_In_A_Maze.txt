#include <iostream>
#include <vector>

using namespace std;

bool isSafe(int maze[][4], int newx, int newy, vector<vector<bool>>&visited, int row, int col){
    if(newx >= 0 && newx < row && newy >=0 && newy < col && visited[newx][newy]==false && maze[newx][newy]==1){
        return true;
    }
    else {
        return false;
    }
}

void findAllPath(int maze[][4], int row, int col, int srcx, int srcy, string&output, vector<vector<bool>>&visited){
    if(srcx == row-1 && srcy == col-1){
        cout<<output<<endl;
        return;
    }

    //UP
    int newx = srcx - 1;
    int newy = srcy;
    if(isSafe(maze, newx, newy, visited, row, col)){
        output.push_back('U');
        visited[newx][newy] = true;
        findAllPath(maze, row, col, newx, newy, output, visited);
        output.pop_back();
        visited[newx][newy] = false;
    }

    //DOWN
    newx = srcx + 1;
    newy = srcy;
    if(isSafe(maze, newx, newy, visited, row, col)){
        output.push_back('D');
        visited[newx][newy] = true;
        findAllPath(maze, row, col, newx, newy, output, visited);
        output.pop_back();
        visited[newx][newy] = false;
    }

    //RIGHT
    newx = srcx;
    newy = srcy + 1;
    if(isSafe(maze, newx, newy, visited, row, col)){
        output.push_back('R');
        visited[newx][newy] = true;
        findAllPath(maze, row, col, newx, newy, output, visited);
        output.pop_back();
        visited[newx][newy] = false;
    }

    //LEFT
    newx = srcx;
    newy = srcy - 1;
    if(isSafe(maze, newx, newy, visited, row, col)){
        output.push_back('L');
        visited[newx][newy] = true;
        findAllPath(maze, row, col, newx, newy, output, visited);
        output.pop_back();
        visited[newx][newy] = false;
    }
}

int main() {
    int maze[4][4] = {
        {1,0,0,0},
        {1,1,0,0},
        {1,1,1,0},
        {1,1,1,1}
    };

    int row = 4;
    int col = 4;
    string output = "";
    int srcx = 0;
    int srcy = 0;

    vector<vector<bool>>visited(row, vector<bool>(col, false));

    if(maze[0][0]==0){
        cout<<"No path exists"<<endl;
    }
    else {
        findAllPath(maze, row, col, srcx, srcy, output, visited);
    }
}