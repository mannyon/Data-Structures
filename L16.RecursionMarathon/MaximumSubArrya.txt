class Solution {
public:

    int maxSumHelper(vector<int>&v, int start, int end){
        if(start == end) return v[start];
        int maxLeft = INT_MIN, maxRight = INT_MIN;
        int mid = (start+end)/2;

        int maxLeftSum = maxSumHelper(v, start, mid);
        int maxRightSum = maxSumHelper(v, mid+1, end);

        int leftBorderSum = 0, rightBorderSum = 0;

        for(int i=mid; i>=start; i--){
            leftBorderSum += v[i];
            if(leftBorderSum > maxLeft) maxLeft = leftBorderSum;
        }

        for(int i=mid+1; i<=end; i++){
            rightBorderSum += v[i];
            if(rightBorderSum > maxRight) maxRight = rightBorderSum;
        }

        int crossBorderSum = maxLeft + maxRight;
        return max(maxLeftSum, max(maxRightSum, crossBorderSum));
    }

    int maxSubArray(vector<int>& nums) {
        return maxSumHelper(nums, 0, nums.size() - 1 );
    }
};